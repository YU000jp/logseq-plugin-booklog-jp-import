import "@logseq/libs";
import { logseq as PL } from "../package.json";
const pluginId = PL.id;

import { getDateForPage } from 'logseq-dateutils';
import swal from 'sweetalert';


function getIsDuplicate(arr1, arr2) {
  return [...arr1, ...arr2].filter(item => arr1.includes(item) && arr2.includes(item)).length > 0
}

/* main */
const main = () => {
  console.info(`#${pluginId}: MAIN`); /* -plugin-id */

  /* https://logseq.github.io/plugins/types/SettingSchemaDesc.html */
  const settingsTemplate = [
    {
      key: "jsonUrl",
      type: "string",
      default: ``,
      title: "„Éï„Ç°„Ç§„É´key„ÇíË≤º„Çä‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
      description: "Êõ¥Êñ∞„Çí„Åä„Åì„Å™„ÅÜÂ†¥Âêà„ÅØ„ÄÅÁ©∫Ê¨Ñ„Å´„Åó„Å¶„ÉÑ„Éº„É´„Éê„Éº„ÅÆüìö„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ2„Å§„ÅÆ„Çµ„Ç§„Éà„ÅåÈñã„Åç„Åæ„Åô„ÄÇ„Åù„Åì„Å´„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„ÄÅÊñ∞„Åó„ÅÑ„Éï„Ç°„Ç§„É´key„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
    },
    {
      key: "deleteMode",
      type: "enum",
      default: "Write",
      enumChoices: ["OFF", "Write", "Delete"],
      enumPicker: "radio",
      title: "‰øÆÂæ©„ÉªÂâäÈô§„É¢„Éº„Éâ",
      description: "[Delete]„ÇíÈÅ∏Êäû„Åó„Å¶üìö„ÇíÊäº„Åô„Å®Êõ∏Á±ç„ÅÆÈñ¢ÈÄ£„Éö„Éº„Ç∏„Çí„Åô„Åπ„Å¶ÂâäÈô§„Åó„Åæ„Åô„ÄÇ(„Ç∏„É£„Éº„Éä„É´„Éö„Éº„Ç∏„Å´Êõ∏„ÅÑ„ÅüÂÜÖÂÆπ„ÅØÊ∂à„Åà„Åæ„Åõ„Çì) [Write]„Åß„ÅØ„Çø„Ç§„Éà„É´„Éö„Éº„Ç∏„Çí„ÅÑ„Å£„Åü„ÇìÂâäÈô§„Åó„Å¶„ÄÅÂÜç„Å≥‰ΩúÊàê„Åó„Åæ„Åô",
    },
    {
      key: "listTitle",
      type: "object",
      inputAs: "hidden",
      default: "",
      title: " ",
      description: "`Edit setting.json`„Åß‰ΩúÊàê„Åï„Çå„ÅüÊõ∏Á±ç„Éö„Éº„Ç∏„ÅÆ‰∏ÄË¶ß„Çí„Éï„Ç°„Ç§„É´„ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ‚ÄªÂâäÈô§„É¢„Éº„ÉâÁî®„ÅÆ„É™„Çπ„Éà„Åß„Åô„ÄÇ",
    },
    {
      key: "listPublisher",
      type: "object",
      inputAs: "hidden",
      default: null,
      title: null,
      description: null,
    },
    {
      key: "listAuthor",
      type: "object",
      inputAs: "hidden",
      default: null,
      title: null,
      description: null,
    },
  ];
  /*Javascript„Åß„ÅØ„Å™„ÅèPHP„ÅßÂá¶ÁêÜ„Åô„Çã„Åì„Å®„Å´„Åó„Åü
  , {
              key: "limitTags",
              type: "string",
              default: ``,
              title: "„Çø„Ç∞ („Éá„Éï„Ç©„É´„Éà„ÅØÁÑ°Ë®òÂÖ•)",
              description: `„Ç≥„É≥„Éû„Äå,„Äç„ÅßÂå∫Âàá„Å£„Å¶„Çø„Ç∞„ÇíÂÖ•Âäõ„Åô„Çã„ÄÇ‰∏ÄËá¥„Åó„Åü„ÇÇ„ÅÆ„Å†„ÅëÊõ∏Á±ç„Éö„Éº„Ç∏„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åô„ÄÇ(„Åô„Åß„Å´‰ΩúÊàêÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Åì„ÅÆË®≠ÂÆö„ÅØÁÑ°Âäπ„Åß„Åô)`,
          }
  ,{
      key: "limitCategory",
      type: "string",
      default: ``,
      title: "„Ç´„ÉÜ„Ç¥„É™ („Éá„Éï„Ç©„É´„Éà„ÅØÁÑ°Ë®òÂÖ•)",
      description: `„Ç≥„É≥„Éû„Äå,„Äç„ÅßÂå∫Âàá„Å£„Å¶„Ç´„ÉÜ„Ç¥„É™„ÇíÂÖ•Âäõ„Åô„Çã„ÄÇ‰∏ÄËá¥„Åó„Åü„ÇÇ„ÅÆ„Å†„ÅëÊõ∏Á±ç„Éö„Éº„Ç∏„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åô„ÄÇ(„Åô„Åß„Å´‰ΩúÊàêÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Åì„ÅÆË®≠ÂÆö„ÅØÁÑ°Âäπ„Åß„Åô)`,
  }
  */
  logseq.useSettingsSchema(settingsTemplate);

  if (logseq.settings.listTitle === "") {
    logseq.showMainUI();
    swal({
      title: "„Éñ„ÇØ„É≠„Ç∞Áî®„Éó„É©„Ç∞„Ç§„É≥„ÅåË™≠„ÅøËæº„Åæ„Çå„Åæ„Åó„Åü",
      text: "„ÉÑ„Éº„É´„Éê„Éº„ÅÆüìö„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
      icon: "info",
    }).then(() => {
      logseq.hideMainUI();
    });
  }

  /* toolbarItem */
  logseq.App.registerUIItem("toolbar", {
    key: pluginId,
    template: `<div data-on-click="open_booklog_jp" style="font-size:20px">üìö</div>`,
  }); /* For open_booklog_jp */



  console.info(`#${pluginId}: loaded`);
}; /* end_main */



/* dashboard */
const model = {

  //click toolbar
  open_booklog_jp() {
    console.info(`#${pluginId}: open_booklog_jp`);

    const createContentTitle = "„Éñ„ÇØ„É≠„Ç∞„ÅÆ„É™„Çπ„Éà";
    const settingJsonUrl = logseq.settings.jsonUrl;

    if (logseq.settings.deleteMode === "Delete") {
      /*
      delete mode
      */
      if (logseq.settings.listTitle === "") {

        //delete mode && listTitle ""
        /* logseq.UI.showMsg("ÂâäÈô§„ÅåÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n\n", `error`, {
          timeout: 6000,
        }); */
        logseq.showSettingsUI();

      } else {

        //dialog
        logseq.showMainUI();
        swal({
          title: "ÂÆüË°å„Åó„Åæ„Åô„Åã?",
          text: "Êõ∏Á±ç„Éö„Éº„Ç∏„Çí„Åô„Åπ„Å¶ÂâäÈô§„Åó„Åæ„Åô\n(„Çø„Ç§„Éà„É´„ÄÅÂá∫ÁâàÁ§æ„ÄÅËëóËÄÖ„ÅÆÂêÑ„Éö„Éº„Ç∏„ÅåÂØæË±°)",
          icon: "warning",
          buttons: true,
          dangerMode: true,
        })
          .then((answer) => {
            if (answer) {//OK
              swal("ÂÆüË°å‰∏≠„Åß„Åô", "Âá¶ÁêÜ„ÅåÁµÇ„Çè„Çã„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ");
              try {
                //delete page by title
                const deleteObjTitle = logseq.settings.listTitle;
                deleteObjTitle.forEach(function (value) {
                  logseq.Editor.deletePage(value);
                });
                //delete page by publisher
                const deleteObjPublisher = logseq.settings.listPublisher;
                deleteObjPublisher.forEach(function (value) {
                  logseq.Editor.deletePage(value);
                });
                //delete page by publisher
                const deleteObjAuthor = logseq.settings.listAuthor;
                deleteObjAuthor.forEach(function (value) {
                  logseq.Editor.deletePage(value);
                });
                logseq.Editor.deletePage(createContentTitle);
                logseq.updateSettings({ listTitle: "", listPublisher: "", listAuthor: "", jsonUrl: "", });//keep delete mode
              } finally {
                swal({
                  title: "ÂâäÈô§„Åå„Åä„Çè„Çä„Åæ„Åó„Åü",
                  text: "'reindex'„Çí„Åä„Åì„Å™„Å£„Å¶„Åè„Å†„Åï„ÅÑ",
                });
              }
            } else {//Cancel
              //user cancel in dialog
              logseq.UI.showMsg("„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü", `warning`);
              logseq.updateSettings({ deleteMode: "OFF" });
              logseq.showSettingsUI();
            }
          })
          .finally(() => {
            logseq.hideMainUI();
          });
        //dialog end

      }
    } else if (settingJsonUrl !== "" && (logseq.settings.deleteMode !== "Delete" && logseq.settings.deleteMode === "Write" || logseq.settings.listTitle === "")) {
      /*
      create page start
      */

      const requestJsonUrl = "http://yu000jp.php.xdomain.jp/main/booklog/logseq/" + settingJsonUrl;
      const setTitleList = logseq.settings.listTitle;
      let dialogMessage;
      let dialogIcon;
      if (setTitleList) {
        dialogMessage = "Êõ∏Á±ç„Éö„Éº„Ç∏„Çí„ÅÑ„Å£„Åü„ÇìÂâäÈô§„Åó„Å¶„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶‰ΩúÊàê„Åó„Åæ„Åô";
        dialogIcon = "warning";
      } else {
        dialogMessage = "Êõ∏Á±ç„Éö„Éº„Ç∏„Çí‰ΩúÊàê„Åó„Åæ„Åô";
        dialogIcon = "info";
      }
      //dialog
      logseq.showMainUI();
      swal({
        title: "ÂÆüË°å„Åó„Åæ„Åô„Åã?",
        text: dialogMessage,
        icon: dialogIcon,
        buttons: true,
      })
        .then((answer) => {

          if (answer) {//OK

            logseq.UI.showMsg("Ë™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô\nÂá¶ÁêÜ„ÅåÁµÇ„Çè„Çã„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ", `info`).then(() => {

              logseq.updateSettings({ deleteMode: "OFF" });

              /* JSON */
              const jsonImport = async (jsonUrl) => {
                await fetch(jsonUrl, {
                  method: 'GET',
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                  }
                })
                  .then((response) => {
                    if (!response.ok) {
                      return "error";
                    }

                    const create = async () => {

                      try {
                        const jsonData = await response.json();

                        //„Çø„Ç∞„ÅßÈôêÂÆö„Åô„Çã
                        //if (logseq.settings.limitTags != "") {
                        //  var settingTagArray = logseq.settings.limitTags.split(',');
                        //} else {
                        //  var settingTagArray = "";
                        //}

                        //list up
                        const PageTitleList = [];
                        const pullDeleteList = [];
                        const PageTagsList = [];
                        const PageCategoryList = [];
                        const PageYearList = [];
                        const PageAuthorList = [];
                        const PagePublisherList = [];
                        const PageTypeList = [];
                        const pullAuthorList = [];


                        //foreach JSON
                        await jsonData.forEach(async function (item, index) {
                          if (item.title === undefined) {
                            return;
                          }
                          if (item.type === undefined) {
                            item.type = "Êú¨";
                          }
                          //„Éö„Éº„Ç∏‰ΩúÊàê„Çø„Ç§„Éà„É´
                          item.title = item.type + "/" + item.title;
                          PageTitleList.push("[[" + item.title + "]]\n");
                          pullDeleteList.push(item.title);
                          if (item.tags !== undefined) {
                            const tagList = item.tags.split(',');
                            tagList.forEach(function (value) {
                              PageTagsList.push("[[" + value + "]]\n");
                            });
                          }
                          if (item.category !== undefined) {
                            PageCategoryList.push("[[" + item.category + "]]\n");
                            item.category = "[[" + item.category + "]]";
                          }
                          if (item.year !== undefined) {
                            PageYearList.push(item.year);//later sort
                            item.year = "[[" + item.year + "]]";
                          }

                          if (item.author !== undefined) {
                            PageAuthorList.push("[[" + item.author + "]]\n");
                            pullAuthorList.push(item.author);
                            item.author = "[[" + item.author + "]]";
                          }
                          if (item.publisher !== undefined) {
                            PagePublisherList.push(item.publisher);
                            item.publisher = "[[Âá∫ÁâàÁ§æ/" + item.publisher + "]]";
                          }
                          if (item.type !== undefined) {
                            PageTypeList.push("[[" + item.type + "]]\n");
                            item.type = "[[" + item.type + "]]";
                          }
                          if (item.end !== undefined) {
                            item.end = "[[" + item.end + "]]";
                          }

                          const obj = item;//„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ª£ÂÖ•„Åó„Å¶ÂâäÈô§„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã

                          //„Çø„Ç∞„ÅßÈôêÂÆö„Åô„Çã
                          //const itemTagsArray = item.tags.split(',');
                          //if (logseq.settings.limitTags !== "" && getIsDuplicate(itemTagsArray, settingTagArray) !== "") {
                          if (item.content !== undefined) {
                            var ItemContent = item.content;
                            delete obj.content;
                          }
                          if (item.review !== undefined) {
                            var ItemReview = "(„É¨„Éì„É•„Éº)\n#+BEGIN_QUOTE\n" + item.review + "\n#+END_QUOTE";
                            delete obj.review;
                          }
                          if (item.memo !== undefined) {
                            var ItemMemo = "(„É°„É¢)\n#+BEGIN_QUOTE\n" + item.memo + "\n#+END_QUOTE";
                            delete obj.memo;
                          }
                          if (setTitleList.includes(item.title)) {
                            //„Åô„Åß„Å´„Çø„Ç§„Éà„É´„Éö„Éº„Ç∏„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà
                            await logseq.Editor.deletePage(item.title);
                          }
                          //Êñ∞Ë¶è‰ΩúÊàê
                          //create page
                          await logseq.Editor.createPage(item.title, obj, {
                            createFirstBlock: true,
                            format: "markdown",
                            redirect: false,
                            parent: createContentTitle,
                          }).then((NewPage) => {
                            if (NewPage) {
                              const uuid = NewPage.uuid;
                              if (ItemContent) {
                                logseq.Editor.insertBlock(uuid, ItemContent);
                              }
                              if (ItemReview) {
                                logseq.Editor.insertBlock(uuid, ItemReview);
                              }
                              if (ItemMemo) {
                                logseq.Editor.insertBlock(uuid, ItemMemo);
                              }
                            }
                          });


                          //} else {
                          //  „Çø„Ç∞„Å´ÂΩì„Å¶„ÅØ„Åæ„Çâ„Å™„ÅÑ„Ç±„Éº„Çπ(‰ΩúÊàê„Åó„Å™„ÅÑ)
                          //  console.log(`Non-create(limit tags): ` + createPageTitle);
                          //}

                        });//foreach done

                        //listUp
                        logseq.Editor.deletePage(createContentTitle);
                        //create page publisher
                        logseq.Editor.createPage("Âá∫ÁâàÁ§æ", {
                          createFirstBlock: true,
                          format: "markdown",
                          redirect: false,
                          tags: "Êú¨",
                        });
                        /* todayDateInUserFormat Sample */
                        const userConfigs = await logseq.App.getUserConfigs();
                        const preferredDateFormat = userConfigs.preferredDateFormat;
                        const today = new Date();
                        const todayDateInUserFormat = getDateForPage(today, preferredDateFormat);

                        //create content page
                        const blockInPage = await logseq.Editor.appendBlockInPage(createContentTitle, todayDateInUserFormat + "„É™„Çπ„ÉàÊõ¥Êñ∞", { parent: "Êú¨,Ë™≠Êõ∏", redirect: true });
                        logseq.Editor.insertBlock(blockInPage.uuid, "„Çø„Ç§„Éà„É´„É™„Çπ„Éà\n" + PageTitleList);
                        logseq.Editor.insertBlock(blockInPage.uuid, "„Çø„Ç∞‰∏ÄË¶ß\n" + [...(new Set(PageTagsList))]);
                        logseq.Editor.insertBlock(blockInPage.uuid, "„Ç´„ÉÜ„Ç¥„É™„Éº\n" + [...(new Set(PageCategoryList))]);
                        //sort year
                        PageYearList.sort(function (first, second) {
                          return first - second;
                        });
                        PageYearList.forEach((value, index) => {
                          PageYearList[index] = " [[" + value + "]] ";
                        });
                        logseq.Editor.insertBlock(blockInPage.uuid, "Áô∫Ë°åÂπ¥\n" + [...(new Set(PageYearList))]);
                        logseq.Editor.insertBlock(blockInPage.uuid, "ËëóËÄÖ\n" + [...(new Set(PageAuthorList))]);
                        const pullPublisherList = [];
                        PagePublisherList.forEach((value, index) => {
                          PagePublisherList[index] = "[" + value + "](Âá∫ÁâàÁ§æ/" + value + ")\n";
                          pullPublisherList.push("Âá∫ÁâàÁ§æ/" + value);
                        });
                        logseq.Editor.insertBlock(blockInPage.uuid, "Âá∫ÁâàÁ§æ\n" + [...(new Set(PagePublisherList))]);
                        logseq.Editor.insertBlock(blockInPage.uuid, "Á®ÆÂà•\n" + [...(new Set(PageTypeList))]);

                        logseq.updateSettings({ listTitle: pullDeleteList, listPublisher: pullPublisherList, listAuthor: pullAuthorList });

                      } finally {
                        logseq.showMainUI();
                        swal({
                          title: "Êõ∏Á±ç„Éö„Éº„Ç∏„ÅÆ‰ΩúÊàê„ÅåÁµÇ„Çè„Çä„Åæ„Åó„Åü",
                          text: '„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂÜçÊßãÁØâ„Çí„Åä„Åì„Å™„Å£„Å¶„Åè„Å†„Åï„ÅÑ\n\n„Åù„ÅÆ„ÅÇ„Å®Â∑¶„É°„Éã„É•„Éº„Å´„ÅÇ„Çã [ÂÖ®„Éö„Éº„Ç∏] „Åã„Çâ„ÄÅÊõ∏Á±ç„ÅÆ„Çø„Ç§„Éà„É´„Éö„Éº„Ç∏„ÇíÊé¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                          icon: "success",
                          content: {
                            element: 'img',
                            attributes: {
                              src: `https://user-images.githubusercontent.com/111847207/210157837-e359b29b-05a0-44d0-9310-915f382012d7.gif`,
                            },
                          }
                        })
                          .then(() => {
                            logseq.App.pushState('page', { name: createContentTitle });
                            logseq.hideMainUI();
                          });
                      }
                    };
                    create();
                  })
                  .catch((reason) => {
                    logseq.UI.showMsg("ERROR: „Éï„Ç°„Ç§„É´key„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ", `error`, {
                      timeout: 6000,
                    });
                  });
              };
              jsonImport(requestJsonUrl);
            });

          } else {//Cancel
            //user cancel in dialog
            logseq.UI.showMsg("„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü", `warning`);
            logseq.updateSettings({ deleteMode: "OFF" });
            logseq.showSettingsUI();
          }
        })
        .finally(() => {
          logseq.hideMainUI();
        });
      //dialog end


    } else {
      if (settingJsonUrl === "") {

        logseq.showMainUI();
        swal("OK„Éú„Çø„É≥„ÇíÊäº„Åô„Å®„ÄÅ„Éñ„É©„Ç¶„Ç∂„Å´2„Å§„ÅÆ„Éö„Éº„Ç∏„ÅåÈñã„Åç„Åæ„Åô„ÄÇ\n\n„Éñ„ÇØ„É≠„Ç∞„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÁîªÈù¢( *„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô )„Åã„Çâ„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n„Åù„ÅÆÊ¨°„Å´„ÄÅÂ§âÊèõ„Çµ„Ç§„Éà„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Åæ„Åô„ÄÇ„Åù„Åì„Åß„Éï„Ç°„Ç§„É´key„Çí„Ç≥„Éî„Éº„Çí„Åó„Å¶„ÄÅLogseq„ÅÆÁîªÈù¢„ÅßË≤º„Çä‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ").then(() => {
          setTimeout(function () {
            logseq.App.openExternalLink('http://yu000jp.php.xdomain.jp/main/booklog/logseq/');
            logseq.App.openExternalLink('https://booklog.jp/export');
          }, 100);
          swal({
            text: "„Éï„Ç°„Ç§„É´key„Çí„Åì„Åì„Å´Ë≤º„Çä‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
            content: "input",
          }).then((value) => {
            logseq.updateSettings({ jsonUrl: value });
            swal("„Åì„ÅÆ„ÅÇ„Å®„ÉÑ„Éº„É´„Éê„Éº„ÅÆüìö„Éú„Çø„É≥„ÇíÊäº„Åô„Å®„Ç§„É≥„Éù„Éº„Éà„ÅåÂÆüË°å„Åï„Çå„ÄÅÊõ∏Á±ç„Éö„Éº„Ç∏„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åô").then(() => {
              logseq.updateSettings({ deleteMode: "Write" });
              logseq.hideMainUI();
            });
          });
        });
      } else {
        logseq.App.pushState('page', { name: createContentTitle });
        logseq.UI.showMsg("„Åô„Åß„Å´‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô");
        logseq.updateSettings({ deleteMode: "OFF" });
        logseq.showSettingsUI();
      }

    }

  }
};

logseq.ready(model, main).catch(console.error);
